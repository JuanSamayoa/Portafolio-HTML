---
import { getBadgeClasses } from "../utils/badgeUtils";

// Simplificamos las interfaces para reducir complejidad
interface Props {
  date: string;
  title: string;
  company?: string;
  location?: string;
  description: string | string[];
  badges?: Array<{ text: string; color?: string }>;
  isActive?: boolean;
}

const {
  date,
  title,
  company,
  location,
  description,
  badges = [],
  isActive = false,
} = Astro.props;

const descArray = Array.isArray(description) ? description : [description];
---

<li class="mb-10 ms-4 group transition-all duration-500 ease-in-out hover:translate-x-2">
  {/* Eliminado el círculo decorativo de la línea de tiempo */}
  
  <time
    class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500 group-hover:text-primary/70 dark:group-hover:text-primary/70 transition-colors duration-300"
    datetime={date.replace(/\s/g, "")}
  >
    {date}
  </time>

  <h3
    class="text-lg font-semibold text-gray-900 dark:text-white transition-colors duration-300 group-hover:text-primary dark:group-hover:text-primary/90 flex flex-wrap items-center gap-2"
  >
    {title}
    {isActive && (
      <span class="flex items-center text-xs font-medium text-primary dark:text-primary-300">
        <span class="relative flex h-2 w-2 me-2">
          <span class="animate-ping-slow absolute inline-flex h-full w-full rounded-full bg-primary opacity-60"></span>
          <span class="relative inline-flex rounded-full h-2 w-2 bg-primary"></span>
        </span>
        Actual
      </span>
    )}
  </h3>

  {
    (company || location) && (
      <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
        {company && <span class="font-medium">{company}</span>}
        {company && location && <span class="mx-1">•</span>}
        {location && <span>{location}</span>}
      </p>
    )
  }

  {
    badges.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-2 mb-3">
        {badges.map((badge) => (
          <span class={getBadgeClasses(badge.text)}>
            {badge.text}
          </span>
        ))}
      </div>
    )
  }

  {
    descArray.map((paragraph) => (
      <p class="mb-2 text-base font-normal text-gray-500 dark:text-gray-400">
        {paragraph}
      </p>
    ))
  }
</li>

<style>
  /* Animación personalizada más suave para el indicador "Actual" */
  @keyframes ping-slow {
    0% {
      transform: scale(1);
      opacity: 0.8;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.4;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  .animate-ping-slow {
    animation: ping-slow 3s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  /* Animación contenida que no afecta otros elementos */
  @keyframes ping-contained {
    0%, 100% {
      transform: scale(1);
      opacity: 0;
    }
    50% {
      transform: scale(1.8);
      opacity: 0.3;
    }
  }
  
  .animate-ping-contained {
    animation: ping-contained 3s ease-in-out infinite;
    background-color: var(--color-primary);
    z-index: -1;
    pointer-events: none;
  }

  @media (prefers-reduced-motion) {
    .animate-ping-contained {
      animation: none;
    }
  }
</style>
