---
import Button from "./Button.astro";
import { personalInfo } from "../../data/portfolio.js";

export interface Props {
  class?: string;
  size?: "sm" | "md" | "lg";
}

const { class: className, size = "lg" } = Astro.props;
---

<div class={`cv-selector ${className || ""}`}>  <!-- Botón principal que muestra el menú -->
  <div class="relative">
    <Button 
      variant="secondary" 
      size={size}
      class="cv-main-button group !text-foreground hover:!text-foreground"
      data-cv-toggle
    >
      <span class="text-current">Ver CV</span>
      <svg class="w-4 h-4 ml-2 cv-chevron transition-transform duration-200 text-current" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </Button>
    
    <!-- Menú desplegable -->
    <div class="cv-dropdown absolute top-full left-0 right-0 mt-2 bg-card border border-border rounded-lg shadow-lg opacity-0 invisible transition-all duration-200 z-50">
      <div class="p-2 space-y-1">        <a 
          href={personalInfo.cvPathEs}
          target="_blank"
          rel="noopener noreferrer"
          class="cv-option flex items-center gap-3 w-full px-3 py-2 text-sm text-gray-900 dark:text-white hover:bg-accent hover:text-accent-foreground rounded-md transition-colors"
        >
          <span class="w-6 h-4 bg-red-500 rounded-sm flex items-center justify-center text-white text-xs font-bold">ES</span>
          <span class="text-gray-900 dark:text-white">Español</span>
          <svg class="w-4 h-4 ml-auto text-gray-900 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </a>
        
        <a 
          href={personalInfo.cvPathEn}
          target="_blank"
          rel="noopener noreferrer"
          class="cv-option flex items-center gap-3 w-full px-3 py-2 text-sm text-gray-900 dark:text-white hover:bg-accent hover:text-accent-foreground rounded-md transition-colors"
        >
          <span class="w-6 h-4 bg-blue-500 rounded-sm flex items-center justify-center text-white text-xs font-bold">EN</span>
          <span class="text-gray-900 dark:text-white">English</span>
          <svg class="w-4 h-4 ml-auto text-gray-900 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  .cv-selector {
    position: relative;
  }

  .cv-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .cv-dropdown {
    transform: translateY(-4px);
  }

  .cv-chevron.rotated {
    transform: rotate(180deg);
  }

  .cv-option:hover .w-6 {
    transform: scale(1.1);
  }

  /* Animación suave para los badges de idioma */
  .cv-option .w-6 {
    transition: transform 0.2s ease;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.querySelector('[data-cv-toggle]');
    const dropdown = document.querySelector('.cv-dropdown');
    const chevron = document.querySelector('.cv-chevron');
    
    if (!toggleButton || !dropdown || !chevron) return;

    // Toggle del menú
    toggleButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const isOpen = dropdown.classList.contains('show');
      
      if (isOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    // Cerrar al hacer click fuera
    document.addEventListener('click', (e) => {
      if (!toggleButton.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
        closeDropdown();
      }
    });

    // Cerrar con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });    function openDropdown() {
      if (dropdown && chevron) {
        dropdown.classList.add('show');
        chevron.classList.add('rotated');
      }
    }

    function closeDropdown() {
      if (dropdown && chevron) {
        dropdown.classList.remove('show');
        chevron.classList.remove('rotated');
      }
    }
  });
</script>
