---
import MailIcon from "./icons/MailIcon.astro";
import { personalInfo } from "../data/portfolio";
---

<div class="w-full reveal-section">
  <h2 class="text-2xl md:text-3xl font-bold text-gray-800 dark:text-white mb-2 flex items-center gap-2 reveal-item">
    <MailIcon class="inline-block w-7 h-7 md:w-8 md:h-8" />
    Contacto
  </h2>
  <p class="text-gray-600 dark:text-gray-400 mb-8 reveal-item">
    ¿Interesado en colaborar o tienes alguna pregunta? ¡Contáctame!
  </p>
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Información de contacto -->
    <div class="reveal-item" style="--reveal-delay: 100ms">
      <div class="bg-white dark:bg-gray-800/70 p-6 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm h-full">
        <h3 class="text-xl font-bold mb-4 text-gray-800 dark:text-white">Información de Contacto</h3>
        <div class="space-y-4">
          <!-- Componente reutilizable para elementos de contacto -->
          <div class="flex items-start gap-3">
            <div class="bg-primary/10 dark:bg-primary/20 p-3 rounded-full mt-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect width="20" height="16" x="2" y="4" rx="2"></rect>
                <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
              </svg>
            </div>            <div>
              <h4 class="font-semibold text-gray-800 dark:text-white">Email</h4>
              <a href={`mailto:${personalInfo.email}`} class="text-primary hover:underline">{personalInfo.email}</a>
            </div>
          </div>
          <!-- Componente reutilizable para elementos de contacto -->
          <div class="flex items-start gap-3">
            <div class="bg-primary/10 dark:bg-primary/20 p-3 rounded-full mt-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
            </div>            <div>
              <h4 class="font-semibold text-gray-800 dark:text-white">Ubicación</h4>
              <p class="text-gray-600 dark:text-gray-300">{personalInfo.location}</p>
            </div>
          </div>
          <!-- Componente reutilizable para elementos de contacto -->
          <div class="flex items-start gap-3">
            <div class="bg-primary/10 dark:bg-primary/20 p-3 rounded-full mt-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                <rect width="4" height="12" x="2" y="9"></rect>
                <circle cx="4" cy="4" r="2"></circle>
              </svg>
            </div>            <div>
              <h4 class="font-semibold text-gray-800 dark:text-white">LinkedIn</h4>
              <a href={personalInfo.linkedin} target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">linkedin.com/in/juansamayoa</a>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Formulario de contacto -->
    <div class="reveal-item" style="--reveal-delay: 200ms">
      <div id="contact-success" class="hidden mb-4 p-3 rounded bg-green-100 text-green-800 dark:bg-green-900/60 dark:text-green-200 text-sm">¡Mensaje enviado correctamente!</div>
      <div id="contact-error" class="hidden mb-4 p-3 rounded bg-red-100 text-red-800 dark:bg-red-900/60 dark:text-red-200 text-sm"></div>
      <form id="contact-form" class="bg-white dark:bg-gray-800/70 p-6 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Nombre</label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-colors"
          />
        </div>
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-colors"
          />
        </div>
        <div>
          <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Asunto</label>
          <input 
            type="text" 
            id="subject" 
            name="subject" 
            required
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-colors"
          />
        </div>
        <div>
          <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Mensaje</label>
          <textarea 
            id="message" 
            name="message" 
            rows="4" 
            required
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-colors"
          ></textarea>
        </div>
        <div>
          <button 
            id="contact-submit"
            type="submit"
            class="w-full py-2.5 px-5 bg-primary hover:bg-primary-600 text-white font-medium rounded-md shadow-sm hover:shadow transition-all focus:outline-none focus:ring-2 focus:ring-primary/50 disabled:opacity-60 disabled:cursor-not-allowed"
          >
            Enviar Mensaje
          </button>
        </div>
      </form>      <script>
        // Importar las funciones de validación
        import { 
          validateContactForm, 
          debounce, 
          RateLimiter,
          VALIDATION_CONSTANTS 
        } from '../utils/validation';
        
        // Configurar rate limiter
        const rateLimiter = new RateLimiter(
          VALIDATION_CONSTANTS.RATE_LIMIT.MAX_ATTEMPTS,
          VALIDATION_CONSTANTS.RATE_LIMIT.WINDOW_MS
        );
        
        // Elementos del DOM
        const form = document.getElementById('contact-form') as HTMLFormElement;
        const btn = document.getElementById('contact-submit') as HTMLButtonElement;
        const success = document.getElementById('contact-success') as HTMLElement;
        const error = document.getElementById('contact-error') as HTMLElement;
        
        // Función para mostrar errores de validación
        function showValidationErrors(errors: string[]) {
          error.innerHTML = `
            <div class="space-y-1">
              <div class="font-medium">Por favor, corrige los siguientes errores:</div>
              <ul class="text-sm space-y-1">
                ${errors.map(err => `<li>• ${err}</li>`).join('')}
              </ul>
            </div>
          `;
          error.classList.remove('hidden');
        }
        
        // Función para validar campo individual
        function validateField(field: HTMLInputElement | HTMLTextAreaElement) {
          const value = field.value.trim();
          field.classList.remove('border-red-500', 'border-green-500');
          
          let isValid = false;
          switch (field.name) {
            case 'name':
              isValid = value.length >= 2 && value.length <= 50;
              break;
            case 'email':
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              isValid = emailRegex.test(value) && value.length <= 254;
              break;
            case 'subject':
              isValid = value.length >= 5 && value.length <= 100;
              break;
            case 'message':
              isValid = value.length >= 10 && value.length <= 1000;
              break;
          }
          
          field.classList.add(isValid ? 'border-green-500' : 'border-red-500');
          return isValid;
        }
        
        // Validación en tiempo real (con debounce)
        const debouncedValidation = debounce((field: HTMLInputElement | HTMLTextAreaElement) => {
          validateField(field);
        }, 300);
        
        if (form) {
          // Agregar validación en tiempo real a todos los campos
          const fields = form.querySelectorAll('input, textarea') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
          fields.forEach(field => {
            field.addEventListener('input', () => debouncedValidation(field));
            field.addEventListener('blur', () => validateField(field));
          });
          
          // Manejar envío del formulario
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Verificar rate limiting
            const userIdentifier = 'contact-form'; // En producción podrías usar IP o session
            if (!rateLimiter.canAttempt(userIdentifier)) {
              const remainingTime = Math.ceil(rateLimiter.getRemainingTime(userIdentifier) / 1000);
              showValidationErrors([`Has superado el límite de envíos. Intenta de nuevo en ${remainingTime} segundos.`]);
              return;
            }
            
            // Deshabilitar botón y limpiar mensajes
            btn.disabled = true;
            btn.textContent = 'Enviando...';
            success.classList.add('hidden');
            error.classList.add('hidden');
            
            // Obtener y validar datos del formulario
            const formData = new FormData(form);
            const data = {
              name: formData.get('name') as string,
              email: formData.get('email') as string,
              subject: formData.get('subject') as string,
              message: formData.get('message') as string
            };
            
            // Validar datos
            const validation = validateContactForm(data);
            if (!validation.isValid) {
              showValidationErrors(validation.errors);
              btn.disabled = false;
              btn.textContent = 'Enviar Mensaje';
              return;
            }
            
            try {
              // Intentar enviar el formulario
              const response = await fetch('https://my-wedding-database.vercel.app/api/portafolio/contact', {
                method: 'POST',
                headers: { 
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify(data)
              });
              
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
              }
              
              // Éxito
              success.classList.remove('hidden');
              form.reset();
              
              // Limpiar estilos de validación
              fields.forEach(field => {
                field.classList.remove('border-red-500', 'border-green-500');
              });
              
            } catch (err) {
              console.error('Error al enviar formulario:', err);
              showValidationErrors([
                'No se pudo enviar el mensaje. Por favor, intenta de nuevo más tarde.',
                'Si el problema persiste, puedes contactarme directamente por email.'
              ]);
            } finally {
              btn.disabled = false;
              btn.textContent = 'Enviar Mensaje';
            }
          });
        }
      </script>
    </div>
  </div>
</div>
