---
import Header from "../components/Header.astro";
import Background from "../components/Background.astro";
import ScrollToTop from "../components/ScrollToTop.astro";
import "@fontsource/onest";

// Definición de la interfaz para las props
interface Props {
  title?: string;
  description?: string;
}

// Valores predeterminados para las props
const {
  title = "Mi Portafolio | Desarrollador Web",
  description = "Portafolio profesional de desarrollador web",
} = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth transition-colors duration-500">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- Google Fonts - Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- SEO mejorado -->
    <meta name="robots" content="index, follow">
    <meta name="author" content="Juan Samayoa">
    <meta name="keywords" content="QA, Desarrollador, Frontend, Angular, TypeScript, Testing">
    
    <!-- Open Graph para redes sociales -->
    <meta property="og:title" content={title}>
    <meta property="og:description" content={description}>
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://juan-samayoa.is-a.dev">
    <meta property="og:image" content="https://juan-samayoa.is-a.dev/assets/img/profile.webp">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content={title}>
    <meta name="twitter:description" content={description}>
    <meta name="twitter:image" content="https://juan-samayoa.is-a.dev/assets/img/profile.webp">
    
    <!-- Security Headers -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://fonts.googleapis.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self'; frame-ancestors 'self';">
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="X-Frame-Options" content="SAMEORIGIN">
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
    
    <!-- PWA Meta tags -->
    <meta name="theme-color" content="#3b82f6">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    
    <!-- Polyfill simplificado para IntersectionObserver -->
    <script is:inline>
      if (typeof IntersectionObserver === 'undefined') {
        // Definición simple de IntersectionObserver para navegadores que no lo soportan
        window.IntersectionObserver = function(callback) {
          this.observe = function(element) {
            setTimeout(function() {
              callback([{isIntersecting: true, target: element}]);
            }, 100);
          };
          this.unobserve = function() {};
          this.disconnect = function() {};
        };
      }
    </script>
  </head>
  <body class="transition-colors duration-500">
    <Background />
    <Header />
    <main>
      <slot />
    </main>
    <ScrollToTop />
    <script is:inline>
      // Script inicial para configurar el tema al cargar la página
      try {
        const theme = localStorage.getItem("theme") || 
                    (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
        document.documentElement.classList.toggle("dark", theme === "dark");
      } catch (error) {
        console.warn("Error al establecer tema:", error);
        document.documentElement.classList.remove("dark");
      }
      
      // Registrar Service Worker para PWA
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then(registration => {
              console.log('SW registrado correctamente:', registration.scope);
              
              // Verificar si hay actualizaciones
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                if (newWorker) {
                  newWorker.addEventListener('statechange', () => {
                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                      // Hay una nueva versión disponible
                      if (confirm('Nueva versión disponible. ¿Recargar página?')) {
                        window.location.reload();
                      }
                    }
                  });
                }
              });
            })
            .catch(error => {
              console.log('Error al registrar SW:', error);
            });
        });
      }
    </script>
  </body>
</html>

<style>
  :root {
    color-scheme: light dark;
  }

  html {
    font-family: "Inter", "Onest", system-ui, sans-serif;
    scroll-behavior: smooth;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;
    padding: 0;
  }

  main {
    flex-grow: 1;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
    position: relative;
    z-index: 1;
  }
</style>
