---
/**
 * TEXT ATOM - Componente base para párrafos y texto
 * ===============================================
 */

interface TextProps {
  variant?: 'body' | 'body-sm' | 'body-lg' | 'caption' | 'lead';
  size?: 'xs' | 'sm' | 'base' | 'lg' | 'xl';
  weight?: 'thin' | 'extralight' | 'light' | 'normal' | 'medium' | 'semibold' | 'bold';
  color?: 'inherit' | 'primary' | 'secondary' | 'neutral' | 'muted' | 'white' | 'success' | 'warning' | 'error';
  align?: 'left' | 'center' | 'right' | 'justify';
  leading?: 'tight' | 'normal' | 'relaxed' | 'loose';
  as?: 'p' | 'span' | 'div' | 'strong' | 'em' | 'small';
  truncate?: boolean;
  class?: string;
}

const {
  variant = 'body',
  size,
  weight = 'normal',
  color = 'neutral',
  align = 'left',
  leading = 'normal',
  as = 'p',
  truncate = false,
  class: className = '',
  ...rest
} = Astro.props as TextProps;

// Función helper para obtener clases seguras
function getClass(map: Record<string, string>, key: string, fallback = ''): string {
  return map[key] || fallback;
}

// Variantes predefinidas
const variantMap = {
  'body': 'text-base leading-relaxed text-gray-700 dark:text-gray-300',
  'body-sm': 'text-sm leading-relaxed text-gray-600 dark:text-gray-400',
  'body-lg': 'text-lg leading-relaxed text-gray-700 dark:text-gray-300',
  'caption': 'text-xs leading-tight text-gray-500 dark:text-gray-500',
  'lead': 'text-xl leading-relaxed font-light text-gray-700 dark:text-gray-300'
};

// Tamaños individuales
const sizeMap = {
  xs: 'text-xs',
  sm: 'text-sm',
  base: 'text-base',
  lg: 'text-lg',
  xl: 'text-xl'
};

// Pesos
const weightMap = {
  thin: 'font-thin',
  extralight: 'font-extralight',
  light: 'font-light',
  normal: 'font-normal',
  medium: 'font-medium',
  semibold: 'font-semibold',
  bold: 'font-bold'
};

// Colores
const colorMap = {
  inherit: '',
  primary: 'text-primary',
  secondary: 'text-secondary',
  neutral: 'text-gray-900 dark:text-gray-100',
  muted: 'text-gray-600 dark:text-gray-400',
  white: 'text-white',
  success: 'text-success',
  warning: 'text-warning',
  error: 'text-error'
};

// Alineación
const alignMap = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right',
  justify: 'text-justify'
};

// Line height
const leadingMap = {
  tight: 'leading-tight',
  normal: 'leading-normal',
  relaxed: 'leading-relaxed',
  loose: 'leading-loose'
};

// Construir clases
let classes = [];

// Si se usa variant, aplicarlo directamente
if (variant && variantMap[variant]) {
  classes.push(variantMap[variant]);
} else {
  // Si no hay variant, usar las clases individuales
  if (size) classes.push(getClass(sizeMap, size));
  classes.push(getClass(weightMap, weight));
  classes.push(getClass(colorMap, color));
  classes.push(getClass(leadingMap, leading));
}

// Siempre aplicar alineación
classes.push(getClass(alignMap, align));

// Truncate
if (truncate) classes.push('truncate');

// Clases adicionales
if (className) classes.push(className);

const finalClasses = classes.filter(Boolean).join(' ');
const Tag = as;
---

<Tag class={finalClasses} {...rest}>
  <slot />
</Tag>
