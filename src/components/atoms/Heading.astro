---
/**
 * TYPOGRAPHY ATOMS - Componentes base para texto
 * =============================================
 * Heading, Paragraph, Label, etc.
 */

interface HeadingProps {
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  size?: 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl' | '9xl';
  weight?: 'thin' | 'extralight' | 'light' | 'normal' | 'medium' | 'semibold' | 'bold' | 'extrabold' | 'black';
  color?: 'inherit' | 'primary' | 'secondary' | 'neutral' | 'muted' | 'white';
  align?: 'left' | 'center' | 'right' | 'justify';
  class?: string;
  gradient?: boolean;
}

const {
  level = 1,
  size,
  weight = 'bold',
  color = 'neutral',
  align = 'left',
  class: className = '',
  gradient = false,
  ...rest
} = Astro.props as HeadingProps;

// Funci칩n helper para obtener clases seguras
function getClass(map: Record<string, string>, key: string, fallback = ''): string {
  return map[key] || fallback;
}

// Auto-size basado en el nivel si no se especifica tama침o
const defaultSizes: Record<number, string> = {
  1: '4xl',
  2: '3xl', 
  3: '2xl',
  4: 'xl',
  5: 'lg',
  6: 'base'
};

const finalSize = size || defaultSizes[level] || 'base';

// Mapeo de tama침os a clases de Tailwind
const sizeMap = {
  xs: 'text-xs',
  sm: 'text-sm',
  base: 'text-base',
  lg: 'text-lg',
  xl: 'text-xl',
  '2xl': 'text-2xl',
  '3xl': 'text-3xl',
  '4xl': 'text-4xl',
  '5xl': 'text-5xl',
  '6xl': 'text-6xl',
  '7xl': 'text-7xl',
  '8xl': 'text-8xl',
  '9xl': 'text-9xl'
};

// Pesos de fuente
const weightMap = {
  thin: 'font-thin',
  extralight: 'font-extralight',
  light: 'font-light',
  normal: 'font-normal',
  medium: 'font-medium',
  semibold: 'font-semibold',
  bold: 'font-bold',
  extrabold: 'font-extrabold',
  black: 'font-black'
};

// Colores
const colorMap = {
  inherit: '',
  primary: 'text-primary',
  secondary: 'text-secondary',
  neutral: 'text-gray-900 dark:text-gray-100',
  muted: 'text-gray-600 dark:text-gray-400',
  white: 'text-white'
};

// Alineaci칩n
const alignMap = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right',
  justify: 'text-justify'
};

// Construir clases
const classes = [
  getClass(sizeMap, finalSize),
  getClass(weightMap, weight),
  getClass(colorMap, color),
  getClass(alignMap, align),
  gradient ? 'bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent' : '',
  className
].filter(Boolean).join(' ');

// Determinar el tag HTML
const Tag = level === 1 ? 'h1' : 
            level === 2 ? 'h2' :
            level === 3 ? 'h3' :
            level === 4 ? 'h4' :
            level === 5 ? 'h5' : 'h6';
---

{Tag === 'h1' && <h1 class={classes} {...rest}><slot /></h1>}
{Tag === 'h2' && <h2 class={classes} {...rest}><slot /></h2>}
{Tag === 'h3' && <h3 class={classes} {...rest}><slot /></h3>}
{Tag === 'h4' && <h4 class={classes} {...rest}><slot /></h4>}
{Tag === 'h5' && <h5 class={classes} {...rest}><slot /></h5>}
{Tag === 'h6' && <h6 class={classes} {...rest}><slot /></h6>}
