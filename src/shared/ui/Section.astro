---
/**
 * SECTION CONTAINER - Wrapper consistente para secciones
 * Spacing y padding estandarizado con animaciones de scroll
 */

interface Props {
  id?: string;
  class?: string;
  background?: "primary" | "secondary" | "gradient";
  spacing?: "sm" | "md" | "lg";
}

const {
  id,
  class: className = "",
  background = "primary",
  spacing = "lg",
} = Astro.props;

const backgrounds = {
  primary: "bg-background-primary",
  secondary: "bg-background-secondary",
  gradient: "bg-gradient-to-b from-background-primary to-background-secondary",
};

const spacings = {
  sm: "py-12 md:py-16",
  md: "py-16 md:py-24",
  lg: "py-20 md:py-32",
};

const classes = `${backgrounds[background]} ${spacings[spacing]} ${className}`;
---

<section id={id} class={classes}>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <slot />
  </div>
</section>

<style>
  section {
    position: relative;
    overflow: hidden;
  }

  /* Animación de aparición al hacer scroll */
  section {
    opacity: 0;
    transform: translateY(30px);
    animation: section-reveal 0.8s ease-out forwards;
  }

  @keyframes section-reveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Intersection Observer para animaciones al hacer scroll
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
          }
        });
      },
      { threshold: 0.1, rootMargin: "0px 0px -100px 0px" }
    );

    sections.forEach((section) => observer.observe(section));
  });
</script>
