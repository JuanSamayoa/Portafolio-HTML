---
import Header from "../components/Header.astro";
import Background from "../components/Background.astro";
import ScrollToTop from "../components/ScrollToTop.astro";
import "@fontsource/onest";

// Definición de la interfaz para las props
interface Props {
  title?: string;
  description?: string;
}

// Valores predeterminados para las props
const {
  title = "Mi Portafolio | Desarrollador Web",
  description = "Portafolio profesional de desarrollador web",
} = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth transition-colors duration-500">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    
    <!-- Solución simple para IntersectionObserver -->
    <script is:inline>
      // Verificación mínima antes de usar IntersectionObserver
      if (typeof IntersectionObserver === 'undefined') {
        // IntersectionObserver polyfill simplificado
        window.IntersectionObserver = function(callback, options) {
          this.observe = function(element) {
            // Simular que todos los elementos son visibles
            setTimeout(function() {
              callback([{
                isIntersecting: true,
                target: element
              }]);
            }, 100);
          };
          this.unobserve = function() {};
          this.disconnect = function() {};
        };
      }
    </script>
  </head>
  <body class="transition-colors duration-500">
    <Background />
    <Header />
    <main>
      <slot />
    </main>
    <ScrollToTop />
    <script is:inline>
      // Script inicial para configurar el tema
      try {
        const theme = localStorage.getItem("theme") || 
                    (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
        document.documentElement.classList.toggle("dark", theme === "dark");
      } catch (error) {
        console.warn("Error al establecer tema:", error);
        document.documentElement.classList.remove("dark");
      }

      // Función de utilidad para inicializar elementos si los scripts fallan
      document.addEventListener('DOMContentLoaded', function() {
        // 1. Inicializar ScrollToTop si falla el script principal
        const scrollToTopBtn = document.getElementById('scroll-to-top');
        if (scrollToTopBtn && !scrollToTopBtn.hasAttribute('data-initialized')) {
          window.addEventListener('scroll', function() {
            if (window.scrollY > 300) {
              scrollToTopBtn.classList.remove('opacity-0', 'invisible', 'translate-y-10');
              scrollToTopBtn.classList.add('opacity-100', 'translate-y-0');
            } else {
              scrollToTopBtn.classList.add('opacity-0', 'invisible', 'translate-y-10');
              scrollToTopBtn.classList.remove('opacity-100', 'translate-y-0');
            }
          });
          
          scrollToTopBtn.addEventListener('click', function() {
            window.scrollTo({top: 0, behavior: 'smooth'});
          });
          
          scrollToTopBtn.setAttribute('data-initialized', 'true');
        }
        
        // 2. Inicializar elementos de revelación
        document.querySelectorAll('.reveal-item:not(.is-revealed)').forEach(function(item) {
          item.classList.add('is-revealed');
        });
        
        // 3. Inicializar menú móvil
        const mobileMenuBtn = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuBtn && mobileMenu && !mobileMenuBtn.hasAttribute('data-initialized')) {
          mobileMenuBtn.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
          });
          
          mobileMenuBtn.setAttribute('data-initialized', 'true');
        }
      });
    </script>
  </body>
</html>

<style>
  :root {
    color-scheme: light dark;
  }

  html {
    font-family: "Onest", sans-serif;
  }

  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;
    padding: 0;
  }

  main {
    flex-grow: 1;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
    position: relative;
    z-index: 1;
  }
</style>
