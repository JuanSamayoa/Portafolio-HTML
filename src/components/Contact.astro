---
import MailIcon from "./icons/MailIcon.astro";
import { personalInfo } from "../data/portfolio";
---

<div class="w-full reveal-section relative overflow-hidden">
  <!-- Fondo decorativo -->
  <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 opacity-50"></div>
  <div class="absolute top-10 right-10 w-32 h-32 bg-primary/10 rounded-full blur-3xl"></div>
  <div class="absolute bottom-10 left-10 w-24 h-24 bg-primary/5 rounded-full blur-2xl"></div>
  
  <div class="relative z-10">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-800 dark:text-white mb-4 reveal-item">
        <MailIcon class="inline-block w-8 h-8 md:w-10 md:h-10 mr-3 text-primary" />
        ¡Hablemos!
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 mb-2 reveal-item">
        ¿Tienes un proyecto en mente? ¿Quieres colaborar?
      </p>
      <p class="text-sm text-primary font-medium reveal-item">
        📧 Respondo en menos de 24 horas
      </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Información de contacto mejorada -->
      <div class="lg:col-span-1 reveal-item" style="--reveal-delay: 100ms">
        <div class="bg-white dark:bg-gray-800/80 backdrop-blur-sm p-6 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-xl hover:shadow-2xl transition-all duration-300 h-full">
          <h3 class="text-xl font-bold mb-6 text-gray-800 dark:text-white">Información de Contacto</h3>
          <div class="space-y-6">
            <!-- Email con animación -->
            <div class="group flex items-start gap-4 p-4 rounded-xl hover:bg-primary/5 transition-all duration-300 cursor-pointer" onclick="window.location.href='mailto:${personalInfo.email}'">
              <div class="bg-gradient-to-br from-primary to-primary/80 p-3 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <rect width="20" height="16" x="2" y="4" rx="2"></rect>
                  <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 dark:text-white group-hover:text-primary transition-colors">Email</h4>
                <p class="text-primary hover:underline text-sm">{personalInfo.email}</p>
                <p class="text-xs text-gray-500 mt-1">Respuesta en 24h</p>
              </div>
            </div>

            <!-- Ubicación -->
            <div class="group flex items-start gap-4 p-4 rounded-xl hover:bg-primary/5 transition-all duration-300">
              <div class="bg-gradient-to-br from-green-500 to-green-600 p-3 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 dark:text-white group-hover:text-green-600 transition-colors">Ubicación</h4>
                <p class="text-gray-600 dark:text-gray-300 text-sm">{personalInfo.location}</p>
                <p class="text-xs text-gray-500 mt-1">Disponible para remoto</p>
              </div>
            </div>

            <!-- LinkedIn -->
            <div class="group flex items-start gap-4 p-4 rounded-xl hover:bg-primary/5 transition-all duration-300 cursor-pointer" onclick="window.open('${personalInfo.linkedin}', '_blank')">
              <div class="bg-gradient-to-br from-blue-600 to-blue-700 p-3 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect width="4" height="12" x="2" y="9"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 dark:text-white group-hover:text-blue-600 transition-colors">LinkedIn</h4>
                <p class="text-blue-600 hover:underline text-sm">@juansamayoa</p>
                <p class="text-xs text-gray-500 mt-1">Red profesional</p>
              </div>
            </div>

            <!-- WhatsApp (nuevo) -->
            <div class="group flex items-start gap-4 p-4 rounded-xl hover:bg-primary/5 transition-all duration-300 cursor-pointer" onclick="window.open('https://wa.me/50255555555', '_blank')">
              <div class="bg-gradient-to-br from-green-500 to-green-600 p-3 rounded-xl group-hover:scale-110 transition-transform duration-300 shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.465 3.516"/>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 dark:text-white group-hover:text-green-600 transition-colors">WhatsApp</h4>
                <p class="text-green-600 hover:underline text-sm">Mensaje directo</p>
                <p class="text-xs text-gray-500 mt-1">Respuesta inmediata</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Formulario de contacto mejorado -->
      <div class="lg:col-span-2 reveal-item" style="--reveal-delay: 200ms">
        <div id="contact-success" class="hidden mb-6 p-4 rounded-xl bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/40 dark:to-green-800/40 border border-green-200 dark:border-green-700 text-green-800 dark:text-green-200">
          <div class="flex items-center gap-3">
            <div class="bg-green-500 p-2 rounded-full">
              <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
            </div>
            <div>
              <p class="font-semibold">¡Mensaje enviado correctamente!</p>
              <p class="text-sm opacity-90">Te responderé dentro de las próximas 24 horas.</p>
            </div>
          </div>
        </div>
        
        <div id="contact-error" class="hidden mb-6 p-4 rounded-xl bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/40 dark:to-red-800/40 border border-red-200 dark:border-red-700 text-red-800 dark:text-red-200">
          <div class="flex items-start gap-3">
            <div class="bg-red-500 p-2 rounded-full">
              <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
              </svg>
            </div>
            <div id="error-content"></div>
          </div>
        </div>

        <form id="contact-form" class="bg-white dark:bg-gray-800/80 backdrop-blur-sm p-8 rounded-2xl border border-gray-200 dark:border-gray-700 shadow-xl hover:shadow-2xl transition-all duration-300">
          <div class="mb-6">
            <h3 class="text-2xl font-bold text-gray-800 dark:text-white mb-2">Envíame un mensaje</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Completa el formulario y me pondré en contacto contigo pronto</p>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div class="space-y-2">
              <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre</label>
              <div class="relative">
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  required
                  class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-all duration-300 hover:border-primary/50"
                  placeholder="Tu nombre completo"
                />
                <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                  </svg>
                </div>
              </div>
            </div>

            <div class="space-y-2">
              <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
              <div class="relative">
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  required
                  class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-all duration-300 hover:border-primary/50"
                  placeholder="tu@email.com"
                />
                <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>

          <div class="space-y-2 mb-6">
            <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Asunto</label>
            <div class="relative">
              <input 
                type="text" 
                id="subject" 
                name="subject" 
                required
                class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-all duration-300 hover:border-primary/50"
                placeholder="¿De qué quieres hablar?"
              />
              <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
                </svg>
              </div>
            </div>
          </div>

          <div class="space-y-2 mb-8">
            <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Mensaje</label>
            <div class="relative">
              <textarea 
                id="message" 
                name="message" 
                rows="5" 
                required
                class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary/50 focus:border-primary outline-none transition-all duration-300 hover:border-primary/50 resize-none"
                placeholder="Cuéntame sobre tu proyecto, idea o cualquier cosa en la que pueda ayudarte..."
              ></textarea>
              <div class="absolute left-4 top-4 text-gray-400">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                </svg>
              </div>
            </div>
          </div>

          <button 
            id="contact-submit"
            type="submit"
            class="group w-full py-4 px-6 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 disabled:opacity-60 disabled:cursor-not-allowed transform hover:scale-[1.02] relative overflow-hidden"
          >
            <!-- Efecto de brillo -->
            <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
            
            <div class="flex items-center justify-center gap-3 relative z-10">
              <svg id="submit-icon" class="w-5 h-5 transition-transform duration-300 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
              </svg>
              <span id="submit-text">Enviar Mensaje</span>
            </div>
          </button>

          <p class="text-xs text-gray-500 dark:text-gray-400 mt-4 text-center">
            Al enviar este formulario, aceptas que me ponga en contacto contigo respecto a tu consulta.
          </p>
        </form>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  (() => {
    // Configuración del formulario
    const FORM_CONFIG = {
      MAX_MESSAGE_LENGTH: 500,
      VALIDATION_DELAY: 300,
      RATE_LIMIT_WINDOW: 60000, // 1 minuto
      RATE_LIMIT_MAX_ATTEMPTS: 3
    };

    // Rate limiter simple
    const rateLimiter = {
      attempts: new Map(),
      
      canAttempt(identifier) {
        const now = Date.now();
        const userAttempts = this.attempts.get(identifier) || [];
        
        // Limpiar intentos antiguos
        const validAttempts = userAttempts.filter(time => 
          now - time < FORM_CONFIG.RATE_LIMIT_WINDOW
        );
        
        this.attempts.set(identifier, validAttempts);
        return validAttempts.length < FORM_CONFIG.RATE_LIMIT_MAX_ATTEMPTS;
      },
      
      recordAttempt(identifier) {
        const now = Date.now();
        const userAttempts = this.attempts.get(identifier) || [];
        userAttempts.push(now);
        this.attempts.set(identifier, userAttempts);
      },
      
      getRemainingTime(identifier) {
        const userAttempts = this.attempts.get(identifier) || [];
        if (userAttempts.length === 0) return 0;
        const oldestAttempt = Math.min(...userAttempts);
        return Math.max(0, FORM_CONFIG.RATE_LIMIT_WINDOW - (Date.now() - oldestAttempt));
      }
    };

    // Utilidades de validación
    const validateRequired = (value, fieldName) => ({
      isValid: value.trim().length > 0,
      error: value.trim().length > 0 ? '' : `${fieldName} es requerido`
    });

    const validateEmail = (email) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      const isValid = emailRegex.test(email.trim());
      return {
        isValid,
        error: isValid ? '' : 'Email no válido'
      };
    };

    const validateMaxLength = (value, maxLength, fieldName) => ({
      isValid: value.trim().length <= maxLength,
      error: value.trim().length <= maxLength ? '' : `${fieldName} debe tener máximo ${maxLength} caracteres`
    });

    const validateContactForm = (data) => ({
      name: validateRequired(data.name, 'Nombre'),
      email: validateEmail(data.email),
      subject: validateRequired(data.subject, 'Asunto'),
      message: (() => {
        const requiredCheck = validateRequired(data.message, 'Mensaje');
        if (!requiredCheck.isValid) return requiredCheck;
        return validateMaxLength(data.message, FORM_CONFIG.MAX_MESSAGE_LENGTH, 'Mensaje');
      })()
    });

    const isFormValid = (validation) => 
      Object.values(validation).every(result => result.isValid);

    // Función debounce
    const debounce = (func, delay) => {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(null, args), delay);
      };
    };

    // Inicializar cuando el DOM esté listo
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initContactForm);
    } else {
      initContactForm();
    }

    function initContactForm() {
      // Elementos del DOM
      const form = document.getElementById('contact-form');
      const btn = document.getElementById('contact-submit');
      const success = document.getElementById('contact-success');
      const error = document.getElementById('contact-error');
      
      if (!form || !btn || !success || !error) return;
      
      // Función para mostrar errores de validación
      function showValidationErrors(errors) {
        const errorContent = document.getElementById('error-content');
        if (errorContent) {
          errorContent.innerHTML = `
            <div class="space-y-1">
              <div class="font-medium">Por favor, corrige los siguientes errores:</div>
              <ul class="text-sm space-y-1">
                ${errors.map(err => `<li>• ${err}</li>`).join('')}
              </ul>
            </div>
          `;
        }
        error.classList.remove('hidden');
      }
      
      // Función para validar campo individual
      function validateField(field) {
        const value = field.value.trim();
        field.classList.remove('border-red-500', 'border-green-500');
        
        let result = { isValid: true, error: '' };
        
        switch (field.name) {
          case 'name':
            result = validateRequired(value, 'Nombre');
            break;
          case 'email':
            result = validateEmail(value);
            break;
          case 'subject':
            result = validateRequired(value, 'Asunto');
            break;
          case 'message':
            const requiredCheck = validateRequired(value, 'Mensaje');
            if (!requiredCheck.isValid) {
              result = requiredCheck;
            } else {
              result = validateMaxLength(value, FORM_CONFIG.MAX_MESSAGE_LENGTH, 'Mensaje');
            }
            break;
        }
        
        if (result.isValid) {
          field.classList.add('border-green-500');
        } else {
          field.classList.add('border-red-500');
        }
        
        return result;
      }

      // Validación con debounce
      const debouncedValidation = debounce((field) => {
        validateField(field);
      }, FORM_CONFIG.VALIDATION_DELAY);
      
      // Agregar validación en tiempo real
      const fields = form.querySelectorAll('input, textarea');
      fields.forEach(field => {
        field.addEventListener('input', () => debouncedValidation(field));
        field.addEventListener('blur', () => validateField(field));
      });
      
      // Manejar envío del formulario
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Verificar rate limiting
        const userIdentifier = 'contact-form';
        if (!rateLimiter.canAttempt(userIdentifier)) {
          const remainingTime = Math.ceil(rateLimiter.getRemainingTime(userIdentifier) / 1000);
          showValidationErrors([`Has superado el límite de envíos. Intenta de nuevo en ${remainingTime} segundos.`]);
          return;
        }
        
        // Deshabilitar botón y cambiar estado
        btn.disabled = true;
        const submitText = document.getElementById('submit-text');
        const submitIcon = document.getElementById('submit-icon');
        
        if (submitText) submitText.textContent = 'Enviando...';
        if (submitIcon) {
          submitIcon.innerHTML = `
            <svg class="w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          `;
        }
        
        success.classList.add('hidden');
        error.classList.add('hidden');
        
        // Obtener y validar datos del formulario
        const formData = new FormData(form);
        const data = {
          name: formData.get('name') || '',
          email: formData.get('email') || '',
          subject: formData.get('subject') || '',
          message: formData.get('message') || ''
        };
        
        // Validar datos
        const validation = validateContactForm(data);
        if (!isFormValid(validation)) {
          const errors = Object.values(validation)
            .filter(result => !result.isValid)
            .map(result => result.error);
          showValidationErrors(errors);
          resetButton();
          return;
        }
        
        try {
          // Registrar intento
          rateLimiter.recordAttempt(userIdentifier);
          
          // Enviar formulario
          const response = await fetch('https://my-wedding-database.vercel.app/api/portafolio/contact', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(data)
          });
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          
          // Éxito
          success.classList.remove('hidden');
          form.reset();
          
          // Limpiar estilos de validación
          fields.forEach(field => {
            field.classList.remove('border-red-500', 'border-green-500');
          });
          
        } catch (err) {
          console.error('Error al enviar formulario:', err);
          showValidationErrors([
            'No se pudo enviar el mensaje. Por favor, intenta de nuevo más tarde.',
            'Si el problema persiste, puedes contactarme directamente por email.'
          ]);
        } finally {
          resetButton();
        }
        
        function resetButton() {
          btn.disabled = false;
          if (submitText) submitText.textContent = 'Enviar Mensaje';
          if (submitIcon) {
            submitIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
            `;
          }
        }
      });
    }
  })();
</script>
