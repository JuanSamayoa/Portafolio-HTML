---
// Simplificamos las interfaces para reducir complejidad
interface Props {
  date: string;
  title: string;
  company?: string;
  location?: string;
  description: string | string[];
  badges?: Array<{ text: string; color?: string }>;
  isActive?: boolean;
}

const {
  date,
  title,
  company,
  location,
  description,
  badges = [],
  isActive = false,
} = Astro.props;

/**
 * Genera las clases CSS para los badges basado en el color especificado
 * @param {string} color - El nombre del color a utilizar (primary, secondary, etc.)
 * @returns {string} - Cadena de clases CSS para aplicar al badge
 */
function getBadgeClass(color = "neutral", text = "") {
  // Verificar si hay un color específico para la tecnología
  const techColor = getTechColor(text);
  
  // Constantes de clases base para todos los badges
  const BASE_CLASSES = "text-xs font-medium me-2 px-2.5 py-0.5 rounded transition-all duration-300";
  
  // Colores específicos de tecnologías
  const TECH_COLORS = {
    // Lenguajes y frameworks
    "python": "bg-[#3776AB]/10 text-[#3776AB] dark:bg-[#3776AB]/20 dark:text-[#3776AB] border border-[#3776AB]/30",
    "typescript": "bg-[#3178C6]/10 text-[#3178C6] dark:bg-[#3178C6]/20 dark:text-[#3178C6] border border-[#3178C6]/30",
    "javascript": "bg-[#F7DF1E]/10 text-[#746A00] dark:bg-[#F7DF1E]/20 dark:text-[#F7DF1E] border border-[#F7DF1E]/30",
    "angular": "bg-[#DD0031]/10 text-[#DD0031] dark:bg-[#DD0031]/20 dark:text-[#DD0031] border border-[#DD0031]/30",
    "react": "bg-[#61DAFB]/10 text-[#149ECA] dark:bg-[#61DAFB]/20 dark:text-[#61DAFB] border border-[#61DAFB]/30",
    "vue": "bg-[#4FC08D]/10 text-[#4FC08D] dark:bg-[#4FC08D]/20 dark:text-[#4FC08D] border border-[#4FC08D]/30",
    "html": "bg-[#E34F26]/10 text-[#E34F26] dark:bg-[#E34F26]/20 dark:text-[#E34F26] border border-[#E34F26]/30",
    "css": "bg-[#1572B6]/10 text-[#1572B6] dark:bg-[#1572B6]/20 dark:text-[#1572B6] border border-[#1572B6]/30",
    "tailwind": "bg-[#06B6D4]/10 text-[#06B6D4] dark:bg-[#06B6D4]/20 dark:text-[#06B6D4] border border-[#06B6D4]/30",
    
    // Herramientas
    "postman": "bg-[#FF6C37]/10 text-[#FF6C37] dark:bg-[#FF6C37]/20 dark:text-[#FF6C37] border border-[#FF6C37]/30",
    "jira": "bg-[#0052CC]/10 text-[#0052CC] dark:bg-[#0052CC]/20 dark:text-[#0052CC] border border-[#0052CC]/30",
    "slack": "bg-[#4A154B]/10 text-[#4A154B] dark:bg-[#4A154B]/20 dark:text-[#4A154B] border border-[#4A154B]/30",
    "selenium": "bg-[#43B02A]/10 text-[#43B02A] dark:bg-[#43B02A]/20 dark:text-[#43B02A] border border-[#43B02A]/30",
    "oracle": "bg-[#F80000]/10 text-[#F80000] dark:bg-[#F80000]/20 dark:text-[#F80000] border border-[#F80000]/30",
    "sql": "bg-[#4479A1]/10 text-[#4479A1] dark:bg-[#4479A1]/20 dark:text-[#4479A1] border border-[#4479A1]/30",
    "xray": "bg-[#971CEA]/10 text-[#971CEA] dark:bg-[#971CEA]/20 dark:text-[#971CEA] border border-[#971CEA]/30",
    "powerbi": "bg-[#F2C811]/10 text-[#7F6A00] dark:bg-[#F2C811]/20 dark:text-[#F2C811] border border-[#F2C811]/30",
    "crm": "bg-[#0078D4]/10 text-[#0078D4] dark:bg-[#0078D4]/20 dark:text-[#0078D4] border border-[#0078D4]/30",
    
    // Nuevos colores añadidos
    "java": "bg-[#007396]/10 text-[#007396] dark:bg-[#007396]/20 dark:text-[#007396] border border-[#007396]/30",
    "sqlserver": "bg-[#CC2927]/10 text-[#CC2927] dark:bg-[#CC2927]/20 dark:text-[#CC2927] border border-[#CC2927]/30",
    "postgresql": "bg-[#336791]/10 text-[#336791] dark:bg-[#336791]/20 dark:text-[#336791] border border-[#336791]/30",
    "express": "bg-[#000000]/10 text-[#000000] dark:bg-[#ffffff]/20 dark:text-[#ffffff] border border-[#000000]/30 dark:border-[#ffffff]/30",
    "nodejs": "bg-[#339933]/10 text-[#339933] dark:bg-[#339933]/20 dark:text-[#339933] border border-[#339933]/30",
    
    // Genéricos (mantener los originales)
    "primary": "bg-primary/10 text-primary dark:bg-primary/20 dark:text-primary/90",
    "secondary": "bg-secondary/10 text-secondary dark:bg-secondary/20 dark:text-secondary/90",
    "accent": "bg-accent/10 text-accent dark:bg-accent/20 dark:text-accent/90",
    "success": "bg-green-100 text-green-800 dark:bg-green-900/40 dark:text-green-300",
    "warning": "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/40 dark:text-yellow-300",
    "error": "bg-red-100 text-red-800 dark:bg-red-900/40 dark:text-red-300",
    "neutral": "bg-gray-100 text-gray-800 dark:bg-gray-700/70 dark:text-gray-300"
  };
  
  // Usar el color específico de la tecnología o el color genérico proporcionado
  const finalColor = techColor !== "neutral" ? techColor : color;
  
  // Si hay un color específico para la tecnología, usarlo
  if (finalColor in TECH_COLORS) {
    return `${BASE_CLASSES} ${TECH_COLORS[finalColor as keyof typeof TECH_COLORS]}`;
  }
  
  // Fallback al color neutral
  return `${BASE_CLASSES} ${TECH_COLORS.neutral}`;
}

/**
 * Asigna un color específico basado en el nombre de la tecnología o herramienta
 * @param {string} text - El nombre de la tecnología/herramienta
 * @returns {string} - El nombre del color a utilizar
 */
function getTechColor(text: string): string {
  // Normalizar el texto para comparación
  const normalizedText = text.toLowerCase();
  
  // Mapa de tecnologías a colores característicos
  const techColors: Record<string, string> = {
    // Lenguajes de programación
    "python": "python",
    "typescript": "typescript", 
    "javascript": "javascript",
    "html": "html",
    "css": "css",
    "html/css": "html",
    
    // Frameworks y bibliotecas
    "angular": "angular",
    "react": "react",
    "vue": "vue",
    "tailwind": "tailwind",
    
    // Herramientas y plataformas
    "postman": "postman",
    "jira": "jira",
    "slack": "slack",
    "selenium": "selenium",
    "oracle": "oracle",
    "oracle sql": "oracle",
    "sql": "sql",
    "x-ray": "xray",
    "power bi": "powerbi",
    "crm": "crm",
    
    // Nuevas tecnologías
    "java": "java",
    "postgresql": "postgresql",
    "microsoft sql server": "sqlserver",
    "express": "express",
    "express js": "express",
    "node": "nodejs",
    "node js": "nodejs",
    "swing": "java",
  };
  
  // Si existe una coincidencia exacta, usarla
  if (normalizedText in techColors) {
    return techColors[normalizedText];
  }
  
  // Si no hay coincidencia exacta, buscar coincidencia parcial
  for (const [tech, color] of Object.entries(techColors)) {
    if (normalizedText.includes(tech)) {
      return color;
    }
  }
  
  // Si no hay coincidencias, devolver neutral
  return "neutral";
}

const descArray = Array.isArray(description) ? description : [description];
---

<li class="mb-10 ms-4 group transition-all duration-500 ease-in-out hover:translate-x-2">
  <div
    class="absolute w-3 h-3 rounded-full mt-1.5 -start-1.5 border-2 border-white dark:border-gray-900 transition-all duration-500 ease-in-out group-hover:scale-125 group-hover:border-primary/50 dark:group-hover:border-primary/50 
    ${isActive ? 'bg-primary dark:bg-primary' : 'bg-gray-200 dark:bg-gray-700'}"
    aria-hidden="true"
  >
    {isActive && (
      <div class="absolute -left-1 -top-1 -right-1 -bottom-1 rounded-full animate-ping-contained opacity-70"></div>
    )}
  </div>
  
  <time
    class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500 group-hover:text-primary/70 dark:group-hover:text-primary/70 transition-colors duration-300"
    datetime={date.replace(/\s/g, "")}
  >
    {date}
  </time>

  <h3
    class="text-lg font-semibold text-gray-900 dark:text-white transition-colors duration-300 group-hover:text-primary dark:group-hover:text-primary/90 flex flex-wrap items-center gap-2"
  >
    {title}
    {isActive && (
      <span class="flex items-center text-xs font-medium text-primary dark:text-primary-300">
        <span class="relative flex h-2 w-2 me-2">
          <span class="animate-ping-slow absolute inline-flex h-full w-full rounded-full bg-primary opacity-60"></span>
          <span class="relative inline-flex rounded-full h-2 w-2 bg-primary"></span>
        </span>
        Actual
      </span>
    )}
  </h3>

  {
    (company || location) && (
      <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
        {company && <span class="font-medium">{company}</span>}
        {company && location && <span class="mx-1">•</span>}
        {location && <span>{location}</span>}
      </p>
    )
  }

  {
    badges.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-2 mb-3">
        {badges.map((badge) => (
          <span class={getBadgeClass(badge.color, badge.text)}>
            {badge.text}
          </span>
        ))}
      </div>
    )
  }

  {
    descArray.map((paragraph) => (
      <p class="mb-2 text-base font-normal text-gray-500 dark:text-gray-400">
        {paragraph}
      </p>
    ))
  }
</li>

<style>
  /* Animación personalizada más suave para el indicador "Actual" */
  @keyframes ping-slow {
    0% {
      transform: scale(1);
      opacity: 0.8;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.4;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  .animate-ping-slow {
    animation: ping-slow 3s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  /* Animación contenida que no afecta otros elementos */
  @keyframes ping-contained {
    0%, 100% {
      transform: scale(1);
      opacity: 0;
    }
    50% {
      transform: scale(1.8);
      opacity: 0.3;
    }
  }
  
  .animate-ping-contained {
    animation: ping-contained 3s ease-in-out infinite;
    background-color: var(--color-primary);
    z-index: -1;
    pointer-events: none;
  }

  @media (prefers-reduced-motion) {
    .animate-ping-contained {
      animation: none;
    }
  }
</style>
